import json
import csv
import os.path

from collection import MemCollection, OrderedDict

import logging
log = logging.getLogger(__name__)


def export_memcollection_to_csv(point_col, csv_name):
    """ export content of point collection with appropriate attributes to 
    a csv file with measurement points and attributes
    
    receives collection of points with attributes
    
    and file location + name for metingen
    
    returns csv file"""

    with open(csv_name, 'wb') as csvfile:

        fieldnames = next(point_col.filter())['properties'].keys()    
        

        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';',
                                quoting=csv.QUOTE_NONE,
                                quotechar='', escapechar='\\')
        
        # wegschrijven data
        writer.writeheader()
                
        for row in point_col:
            regel = {}
            for field in fieldnames:
                regel[field] = row['properties'].get(field, '')
            writer.writerow(regel)
    
    return

def import_csv_to_memcollection(csv_file):
    """ import content of a csv file with measurement points and attributes
    
    receives file location + name for csv 
            (file with dialect as generated by export_memcollection_to_csv)
    
    returns Memcollection of points with attributes"""
    
    point_col = MemCollection(geometry_type='MultiPoint')

    records = []
    fields = []
    
    with open (csv_file, 'rb') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
#         reader = csv.reader(csvfile, delimiter=';')
        fields = reader.fieldnames
        
        for row in reader:          
            properties = {}
            
            for field in fields:
                properties[field] = row[field]
                    
            records.append({'geometry': {'type': 'Point',
                                     'coordinates': (0.0, 0.0)},
                       'properties': properties})
    
    point_col.writerecords(records)
    
    return point_col